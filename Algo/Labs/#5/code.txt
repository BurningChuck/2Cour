#include "pch.h"
#include <iostream>
#include <conio.h>
#include <stdio.h> 
#include <time.h> 
using namespace std;

const int N=4; // розмір матриць

//виведення матриці
void printMatrix(int n, int C[][N]) {
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++)
			cout << C[i][j] << " ";
		cout << endl;
	}
}

//класичний алгоритм множення матриць
void СlassicMultiply(int n, int A[][N], int B[][N], int C[][N]) 
{
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < n; j++)
		{
			C[i][j] = 0;
			for (int t = 0; t < n; t++)
			{
				C[i][j] = C[i][j] + A[i][t] * B[t][j];
			}
		}
	}
}

//дадаємо дві матриці
void AddMatrix(int n, int X[][N], int Y[][N], int Z[][N]) {
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			Z[i][j] = X[i][j] + Y[i][j];
		}
	}
}

//віднімаємо дві матриці
void SubMatrix(int n, int X[][N], int Y[][N], int Z[][N]) {
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			Z[i][j] = X[i][j] - Y[i][j];
		}
	}
}

void Strassen(int n, int A[][N], int B[][N], int C[][N]) {
	int A11[N][N], A12[N][N], A21[N][N], A22[N][N];//допоміжні матриці
	int B11[N][N], B12[N][N], B21[N][N], B22[N][N];//допоміжні матриці
	int C11[N][N], C12[N][N], C21[N][N], C22[N][N];//частини результуючої матриці
	int P1[N][N], P2[N][N], P3[N][N], P4[N][N], P5[N][N], P6[N][N], P7[N][N];//матриці для вираження елементів результуючої
	int AA[N][N], BB[N][N];
	if (n == 2) {
		СlassicMultiply(n, A, B, C);
	}
	else {
		for (int i = 0; i < n / 2; i++)
		{
			for (int j = 0; j < n / 2; j++)
			{
				A11[i][j] = A[i][j];
				A12[i][j] = A[i][j + n / 2];
				A21[i][j] = A[i + n / 2][j];
				A22[i][j] = A[i + n / 2][j + n / 2];

				B11[i][j] = B[i][j];
				B12[i][j] = B[i][j + n / 2];
				B21[i][j] = B[i + n / 2][j];
				B22[i][j] = B[i + n / 2][j + n / 2];
			}
		}

		//P1 = (A11 + A22) × (B11 + B22)
		AddMatrix(n / 2, A11, A22, AA);
		AddMatrix(n / 2, B11, B22, BB);
		Strassen(n / 2, AA, BB, P1);

		//P2 = (A21 + A22) × B11
		AddMatrix(n / 2, A21, A22, AA);
		Strassen(n / 2, AA, B11, P2);

		//P3 = A11 × (B12 - B22)
		SubMatrix(n / 2, B12, B22, BB);
		Strassen(n / 2, A11, BB, P3);

		//P4 = A22 × (B21 - B11)
		SubMatrix(n / 2, B21, B11, BB);
		Strassen(n / 2, A22, BB, P4);

		//P5 = (A11 + A12) × B22
		AddMatrix(n / 2, A11, A12, AA);
		Strassen(n / 2, AA, B22, P5);

		//P6 = (A21 - A11) × (B11 + B12)
		SubMatrix(n / 2, A21, A11, AA);
		AddMatrix(n / 2, B11, B12, BB);
		Strassen(n / 2, AA, BB, P6);

		//P7 = (A12 - A22) × (B21 + B22)
		SubMatrix(n / 2, A12, A22, AA);
		AddMatrix(n / 2, B21, B22, BB);
		Strassen(n / 2, AA, BB, P7);

		//обчислення C11 = P1 + P4 - P5 + P7
		AddMatrix(n / 2, P1, P4, AA);
		SubMatrix(n / 2, P7, P5, BB);
		AddMatrix(n / 2, AA, BB, C11);

		//обчислення C12 = P3 + P5
		AddMatrix(n / 2, P3, P5, C12);

		//обчислення C21 = P2 + P4
		AddMatrix(n / 2, P2, P4, C21);

		//обчислення C22 = P1 - P2 + P3 + P6
		SubMatrix(n / 2, P1, P2, AA);
		AddMatrix(n / 2, P3, P6, BB);
		AddMatrix(n / 2, AA, BB, C22);

		//злиття в C[][N]
		for (int i = 0; i < n / 2; i++) {
			for (int j = 0; j < n / 2; j++) {
				C[i][j] = C11[i][j];
				C[i][j + n / 2] = C12[i][j];
				C[i + n / 2][j] = C21[i][j];
				C[i + n / 2][j + n / 2] = C22[i][j];
			}
		}
	}
}



int main() {
	setlocale(LC_ALL, "Russian");
	int A[N][N];
	int B[N][N];
	int C[N][N];
	cout << "Введіть першу матрицю " << endl;
	for (int i = 0; i < N; i++) 
		for (int j = 0; j < N; j++)
	cin >> A[i][j];
	cout << "Введіть другу матрицю " << endl;
		for (int i = 0; i < N; i++) 
			for (int j = 0; j < N; j++)
	cin >> B[i][j];
	
	
clock_t time1, time2;
		time1 = clock();
		
		СlassicMultiply(N, A, B, C);
				
		time1 = clock() - time1;
		time2 = clock();
		
		Strassen(N, A, B, C);
		time2 = clock() - time2;
		cout << "Час роботи для класичного методу \t" << (double)time1 / CLOCKS_PER_SEC << std::endl;
		cout << "Час роботи для алгоритма Штрассена \t\t" << (double)time2 / CLOCKS_PER_SEC << std::endl;	
		
printMatrix(N, C);
	return 0;
}
